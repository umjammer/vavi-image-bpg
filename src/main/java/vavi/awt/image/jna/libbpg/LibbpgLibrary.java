package vavi.awt.image.jna.libbpg;
import com.sun.jna.Library;
import com.sun.jna.Native;
import com.sun.jna.NativeLibrary;
import com.sun.jna.Pointer;
import com.sun.jna.PointerType;
import com.sun.jna.ptr.IntByReference;
import com.sun.jna.ptr.PointerByReference;
import java.nio.IntBuffer;


/**
 * JNA Wrapper for library <b>libbpg</b><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public interface LibbpgLibrary extends Library {
	String JNA_LIBRARY_NAME = "bpg";
	NativeLibrary JNA_NATIVE_LIB = NativeLibrary.getInstance(LibbpgLibrary.JNA_LIBRARY_NAME);
	LibbpgLibrary INSTANCE = Native.load(LibbpgLibrary.JNA_LIBRARY_NAME, LibbpgLibrary.class);
	/**
	 * <i>native declaration : libbpg.h</i><br>
	 * enum values
	 */
	interface BPGImageFormatEnum {
		/** <i>native declaration : libbpg.h:5</i> */
		int BPG_FORMAT_GRAY = 0;
		/** <i>native declaration : libbpg.h:6</i> */
		int BPG_FORMAT_420 = 1;
		/** <i>native declaration : libbpg.h:7</i> */
		int BPG_FORMAT_422 = 2;
		/** <i>native declaration : libbpg.h:8</i> */
		int BPG_FORMAT_444 = 3;
		/** <i>native declaration : libbpg.h:9</i> */
		int BPG_FORMAT_420_VIDEO = 4;
		/** <i>native declaration : libbpg.h:10</i> */
		int BPG_FORMAT_422_VIDEO = 5;
	}
	/**
	 * <i>native declaration : libbpg.h</i><br>
	 * enum values
	 */
	interface BPGColorSpaceEnum {
		/** <i>native declaration : libbpg.h:14</i> */
		int BPG_CS_YCbCr = 0;
		/** <i>native declaration : libbpg.h:15</i> */
		int BPG_CS_RGB = 1;
		/** <i>native declaration : libbpg.h:16</i> */
		int BPG_CS_YCgCo = 2;
		/** <i>native declaration : libbpg.h:17</i> */
		int BPG_CS_YCbCr_BT709 = 3;
		/** <i>native declaration : libbpg.h:18</i> */
		int BPG_CS_YCbCr_BT2020 = 4;
		/** <i>native declaration : libbpg.h:20</i> */
		int BPG_CS_COUNT = 5;
	}
	/**
	 * <i>native declaration : libbpg.h</i><br>
	 * enum values
	 */
	interface BPGExtensionTagEnum {
		/** <i>native declaration : libbpg.h:38</i> */
		int BPG_EXTENSION_TAG_EXIF = 1;
		/** <i>native declaration : libbpg.h:39</i> */
		int BPG_EXTENSION_TAG_ICCP = 2;
		/** <i>native declaration : libbpg.h:40</i> */
		int BPG_EXTENSION_TAG_XMP = 3;
		/** <i>native declaration : libbpg.h:41</i> */
		int BPG_EXTENSION_TAG_THUMBNAIL = 4;
		/** <i>native declaration : libbpg.h:42</i> */
		int BPG_EXTENSION_TAG_ANIM_CONTROL = 5;
	}
	/**
	 * <i>native declaration : libbpg.h</i><br>
	 * enum values
	 */
	interface BPGDecoderOutputFormat {
		/** <i>native declaration : libbpg.h:53</i> */
		int BPG_OUTPUT_FORMAT_RGB24 = 0;
		/** <i>native declaration : libbpg.h:54</i> */
		int BPG_OUTPUT_FORMAT_RGBA32 = 1;
		/** <i>native declaration : libbpg.h:55</i> */
		int BPG_OUTPUT_FORMAT_RGB48 = 2;
		/** <i>native declaration : libbpg.h:56</i> */
		int BPG_OUTPUT_FORMAT_RGBA64 = 3;
		/** <i>native declaration : libbpg.h:57</i> */
		int BPG_OUTPUT_FORMAT_CMYK32 = 4;
		/** <i>native declaration : libbpg.h:58</i> */
		int BPG_OUTPUT_FORMAT_CMYK64 = 5;
	}
	/** <i>native declaration : libbpg.h</i> */
	int BPG_DECODER_INFO_BUF_SIZE = 16;
	/**
	 * Original signature : <code>BPGDecoderContext* bpg_decoder_open()</code><br>
	 * <i>native declaration : libbpg.h:63</i>
	 */
	PointerByReference bpg_decoder_open();
	/**
	 * If enable is true, extension data are kept during the image<br>
	 * decoding and can be accessed after bpg_decoder_decode() with<br>
	 * bpg_decoder_get_extension(). By default, the extension data are<br>
	 * discarded.<br>
	 * Original signature : <code>void bpg_decoder_keep_extension_data(BPGDecoderContext*, int)</code><br>
	 * <i>native declaration : libbpg.h:69</i><br>
	 * @deprecated use the safer method {@link #bpg_decoder_keep_extension_data(com.sun.jna.ptr.PointerByReference, int)} instead
	 */
	@Deprecated 
	void bpg_decoder_keep_extension_data(Pointer s, int enable);
	/**
	 * If enable is true, extension data are kept during the image<br>
	 * decoding and can be accessed after bpg_decoder_decode() with<br>
	 * bpg_decoder_get_extension(). By default, the extension data are<br>
	 * discarded.<br>
	 * Original signature : <code>void bpg_decoder_keep_extension_data(BPGDecoderContext*, int)</code><br>
	 * <i>native declaration : libbpg.h:69</i>
	 */
	void bpg_decoder_keep_extension_data(PointerByReference s, int enable);
	/**
	 * return 0 if 0K, < 0 if error<br>
	 * Original signature : <code>int bpg_decoder_decode(BPGDecoderContext*, const uint8_t*, int)</code><br>
	 * <i>native declaration : libbpg.h:72</i><br>
	 * @deprecated use the safer methods {@link #bpg_decoder_decode(com.sun.jna.ptr.PointerByReference, byte[], int)} and {@link #bpg_decoder_decode(com.sun.jna.ptr.PointerByReference, com.sun.jna.Pointer, int)} instead
	 */
	@Deprecated 
	int bpg_decoder_decode(Pointer s, Pointer buf, int buf_len);
	/**
	 * return 0 if 0K, < 0 if error<br>
	 * Original signature : <code>int bpg_decoder_decode(BPGDecoderContext*, const uint8_t*, int)</code><br>
	 * <i>native declaration : libbpg.h:72</i>
	 */
	int bpg_decoder_decode(PointerByReference s, byte[] buf, int buf_len);
	/**
	 * return 0 if 0K, < 0 if error<br>
	 * Original signature : <code>int bpg_decoder_decode(BPGDecoderContext*, const uint8_t*, int)</code><br>
	 * <i>native declaration : libbpg.h:72</i>
	 */
	int bpg_decoder_decode(PointerByReference s, Pointer buf, int buf_len);
	/**
	 * Return the first element of the extension data list<br>
	 * Original signature : <code>BPGExtensionData* bpg_decoder_get_extension_data(BPGDecoderContext*)</code><br>
	 * <i>native declaration : libbpg.h:75</i><br>
	 * @deprecated use the safer method {@link #bpg_decoder_get_extension_data(com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	BPGExtensionData bpg_decoder_get_extension_data(Pointer s);
	/**
	 * Return the first element of the extension data list<br>
	 * Original signature : <code>BPGExtensionData* bpg_decoder_get_extension_data(BPGDecoderContext*)</code><br>
	 * <i>native declaration : libbpg.h:75</i>
	 */
	BPGExtensionData bpg_decoder_get_extension_data(PointerByReference s);
	/**
	 * return 0 if 0K, < 0 if error<br>
	 * Original signature : <code>int bpg_decoder_get_info(BPGDecoderContext*, BPGImageInfo*)</code><br>
	 * <i>native declaration : libbpg.h:78</i><br>
	 * @deprecated use the safer method {@link #bpg_decoder_get_info(com.sun.jna.ptr.PointerByReference, BPGImageInfo)} instead
	 */
	@Deprecated 
	int bpg_decoder_get_info(Pointer s, BPGImageInfo p);
	/**
	 * return 0 if 0K, < 0 if error<br>
	 * Original signature : <code>int bpg_decoder_get_info(BPGDecoderContext*, BPGImageInfo*)</code><br>
	 * <i>native declaration : libbpg.h:78</i>
	 */
	int bpg_decoder_get_info(PointerByReference s, BPGImageInfo p);
	/**
	 * return 0 if 0K, < 0 if error<br>
	 * Original signature : <code>int bpg_decoder_start(BPGDecoderContext*, BPGDecoderOutputFormat)</code><br>
	 * <i>native declaration : libbpg.h:81</i><br>
	 * @deprecated use the safer method {@link #bpg_decoder_start(com.sun.jna.ptr.PointerByReference, int)} instead
	 */
	@Deprecated 
	int bpg_decoder_start(Pointer s, int out_fmt);
	/**
	 * return 0 if 0K, < 0 if error<br>
	 * Original signature : <code>int bpg_decoder_start(BPGDecoderContext*, BPGDecoderOutputFormat)</code><br>
	 * <i>native declaration : libbpg.h:81</i>
	 */
	int bpg_decoder_start(PointerByReference s, int out_fmt);
	/**
	 * return the frame delay for animations as a fraction (*pnum) / (*pden)<br>
	 * in seconds. In case there is no animation, 0 / 1 is returned.<br>
	 * Original signature : <code>void bpg_decoder_get_frame_duration(BPGDecoderContext*, int*, int*)</code><br>
	 * <i>native declaration : libbpg.h:85</i><br>
	 * @deprecated use the safer methods {@link #bpg_decoder_get_frame_duration(com.sun.jna.ptr.PointerByReference, java.nio.IntBuffer, java.nio.IntBuffer)} and {@link #bpg_decoder_get_frame_duration(com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.IntByReference, com.sun.jna.ptr.IntByReference)} instead
	 */
	@Deprecated 
	void bpg_decoder_get_frame_duration(Pointer s, IntByReference pnum, IntByReference pden);
	/**
	 * return the frame delay for animations as a fraction (*pnum) / (*pden)<br>
	 * in seconds. In case there is no animation, 0 / 1 is returned.<br>
	 * Original signature : <code>void bpg_decoder_get_frame_duration(BPGDecoderContext*, int*, int*)</code><br>
	 * <i>native declaration : libbpg.h:85</i>
	 */
	void bpg_decoder_get_frame_duration(PointerByReference s, IntBuffer pnum, IntBuffer pden);
	/**
	 * return the frame delay for animations as a fraction (*pnum) / (*pden)<br>
	 * in seconds. In case there is no animation, 0 / 1 is returned.<br>
	 * Original signature : <code>void bpg_decoder_get_frame_duration(BPGDecoderContext*, int*, int*)</code><br>
	 * <i>native declaration : libbpg.h:85</i>
	 */
	void bpg_decoder_get_frame_duration(PointerByReference s, IntByReference pnum, IntByReference pden);
	/**
	 * return 0 if 0K, < 0 if error<br>
	 * Original signature : <code>int bpg_decoder_get_line(BPGDecoderContext*, void*)</code><br>
	 * <i>native declaration : libbpg.h:88</i><br>
	 * @deprecated use the safer method {@link #bpg_decoder_get_line(com.sun.jna.ptr.PointerByReference, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int bpg_decoder_get_line(Pointer s, Pointer buf);
	/**
	 * return 0 if 0K, < 0 if error<br>
	 * Original signature : <code>int bpg_decoder_get_line(BPGDecoderContext*, void*)</code><br>
	 * <i>native declaration : libbpg.h:88</i>
	 */
	int bpg_decoder_get_line(PointerByReference s, Pointer buf);
	/**
	 * Original signature : <code>void bpg_decoder_close(BPGDecoderContext*)</code><br>
	 * <i>native declaration : libbpg.h:90</i><br>
	 * @deprecated use the safer method {@link #bpg_decoder_close(com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	void bpg_decoder_close(Pointer s);
	/**
	 * Original signature : <code>void bpg_decoder_close(BPGDecoderContext*)</code><br>
	 * <i>native declaration : libbpg.h:90</i>
	 */
	void bpg_decoder_close(PointerByReference s);
	/**
	 * only useful for low level access to the image data<br>
	 * Original signature : <code>uint8_t* bpg_decoder_get_data(BPGDecoderContext*, int*, int)</code><br>
	 * <i>native declaration : libbpg.h:93</i><br>
	 * @deprecated use the safer methods {@link #bpg_decoder_get_data(com.sun.jna.ptr.PointerByReference, java.nio.IntBuffer, int)} and {@link #bpg_decoder_get_data(com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.IntByReference, int)} instead
	 */
	@Deprecated 
	Pointer bpg_decoder_get_data(Pointer s, IntByReference pline_size, int plane);
	/**
	 * only useful for low level access to the image data<br>
	 * Original signature : <code>uint8_t* bpg_decoder_get_data(BPGDecoderContext*, int*, int)</code><br>
	 * <i>native declaration : libbpg.h:93</i>
	 */
	Pointer bpg_decoder_get_data(PointerByReference s, IntBuffer pline_size, int plane);
	/**
	 * only useful for low level access to the image data<br>
	 * Original signature : <code>uint8_t* bpg_decoder_get_data(BPGDecoderContext*, int*, int)</code><br>
	 * <i>native declaration : libbpg.h:93</i>
	 */
	Pointer bpg_decoder_get_data(PointerByReference s, IntByReference pline_size, int plane);
	/**
	 * Get information from the start of the image data in 'buf' (at least<br>
	 * min(BPG_DECODER_INFO_BUF_SIZE, file_size) bytes must be given).<br>
	 * If pfirst_md != NULL, the extension data are also parsed and the<br>
	 * first element of the list is returned in *pfirst_md. The list must<br>
	 * be freed with bpg_decoder_free_extension_data().<br>
	 * BPGImageInfo.loop_count is only set if extension data are parsed.<br>
	 * Return 0 if OK, < 0 if unrecognized data.<br>
	 * Original signature : <code>int bpg_decoder_get_info_from_buf(BPGImageInfo*, BPGExtensionData**, const uint8_t*, int)</code><br>
	 * <i>native declaration : libbpg.h:105</i><br>
	 * @deprecated use the safer methods {@link #bpg_decoder_get_info_from_buf(BPGImageInfo, BPGExtensionData.ByReference[], byte[], int)} and {@link #bpg_decoder_get_info_from_buf(BPGImageInfo, BPGExtensionData.ByReference[], com.sun.jna.Pointer, int)} instead
	 */
	@Deprecated 
	int bpg_decoder_get_info_from_buf(BPGImageInfo p, PointerByReference pfirst_md, Pointer buf, int buf_len);
	/**
	 * Get information from the start of the image data in 'buf' (at least<br>
	 * min(BPG_DECODER_INFO_BUF_SIZE, file_size) bytes must be given).<br>
	 * If pfirst_md != NULL, the extension data are also parsed and the<br>
	 * first element of the list is returned in *pfirst_md. The list must<br>
	 * be freed with bpg_decoder_free_extension_data().<br>
	 * BPGImageInfo.loop_count is only set if extension data are parsed.<br>
	 * Return 0 if OK, < 0 if unrecognized data.<br>
	 * Original signature : <code>int bpg_decoder_get_info_from_buf(BPGImageInfo*, BPGExtensionData**, const uint8_t*, int)</code><br>
	 * <i>native declaration : libbpg.h:105</i>
	 */
	int bpg_decoder_get_info_from_buf(BPGImageInfo p, BPGExtensionData.ByReference[] pfirst_md, byte[] buf, int buf_len);
	/**
	 * Get information from the start of the image data in 'buf' (at least<br>
	 * min(BPG_DECODER_INFO_BUF_SIZE, file_size) bytes must be given).<br>
	 * If pfirst_md != NULL, the extension data are also parsed and the<br>
	 * first element of the list is returned in *pfirst_md. The list must<br>
	 * be freed with bpg_decoder_free_extension_data().<br>
	 * BPGImageInfo.loop_count is only set if extension data are parsed.<br>
	 * Return 0 if OK, < 0 if unrecognized data.<br>
	 * Original signature : <code>int bpg_decoder_get_info_from_buf(BPGImageInfo*, BPGExtensionData**, const uint8_t*, int)</code><br>
	 * <i>native declaration : libbpg.h:105</i>
	 */
	int bpg_decoder_get_info_from_buf(BPGImageInfo p, BPGExtensionData.ByReference[] pfirst_md, Pointer buf, int buf_len);
	/**
	 * Free the extension data returned by bpg_decoder_get_info_from_buf()<br>
	 * Original signature : <code>void bpg_decoder_free_extension_data(BPGExtensionData*)</code><br>
	 * <i>native declaration : libbpg.h:109</i>
	 */
	void bpg_decoder_free_extension_data(BPGExtensionData first_md);
	class BPGDecoderContext extends PointerType {
		public BPGDecoderContext(Pointer address) {
			super(address);
		}
		public BPGDecoderContext() {
			super();
		}
	}
}
