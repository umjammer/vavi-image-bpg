package vavi.awt.image.jna.libbpg;
import com.sun.jna.Pointer;
import com.sun.jna.Structure;
import java.util.Arrays;
import java.util.List;
/**
 * <i>native declaration : /usr/local/src/libbpg/libbpg.h</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class BPGImageInfo extends Structure {
	public int width;
	public int height;
	/** see BPGImageFormatEnum */
	public byte format;
	/** TRUE if an alpha plane is present */
	public byte has_alpha;
	/** see BPGColorSpaceEnum */
	public byte color_space;
	public byte bit_depth;
	/** TRUE if the color is alpha premultiplied */
	public byte premultiplied_alpha;
	/** TRUE if a W plane is present (for CMYK encoding) */
	public byte has_w_plane;
	/** TRUE if limited range for the color */
	public byte limited_range;
	/** TRUE if the image contains animations */
	public byte has_animation;
	/** animations: number of loop, 0 = infinity */
	public short loop_count;
	public BPGImageInfo() {
		super();
	}
	@Override protected List<String> getFieldOrder() {
		return Arrays.asList("width", "height", "format", "has_alpha", "color_space", "bit_depth", "premultiplied_alpha", "has_w_plane", "limited_range", "has_animation", "loop_count");
	}
	public BPGImageInfo(Pointer peer) {
		super(peer);
	}
	public static class ByReference extends BPGImageInfo implements Structure.ByReference {
	}
	public static class ByValue extends BPGImageInfo implements Structure.ByValue {
	}
}
